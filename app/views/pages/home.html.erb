<div class="banner" style="background-image: url('<%= image_path "banner-test-1.jpg"%>')">
  <div class="banner-content">
    <h1>Find your space</h1>
    <p id="fancy-title"></p>


    <div class="form-inline">
      <%= simple_form_for(:search, method: 'get', url: spaces_path, html: { class: "form-inline-search" }) do |f| %>
      <%= f.input :start_date, as: :date, html5: true, label: false %>
      <%= f.input :end_date, as: :date, html5: true, label: false %>
      <%= f.input :location, html5: true, label_html: { class: "location_input" }, label: false, placeholder: "Location" %>
      <%= f.input :category, collection: Space.select(:category).map(&:category).uniq, prompt: 'Choose one', label: false %>
      <%= f.button :submit, 'Search', class: "btn btn-warning" %>
      <% end %>
    </div>
  </div>
</div>


<%= link_to spaces_path(:search => { category: "work"}) do %>
<div class="container">
  <!-- Normal Demo-->
  <div class="column">
    <div class="demo-title"></div>
    <!-- Post-->
    <div class="post-module">
      <!-- Thumbnail-->
      <div class="thumbnail">
        <img src="http://res.cloudinary.com/svendk/image/upload/v1503589804/tvqmbljeg6anvwn3nkpi.jpg"/>
      </div>
      <!-- Post Content-->
      <div class="post-content">
        <div class="category">Work Spaces</div>
        <h1 class="title">Work in serviced, corporate and shared offices</h1>
        <p class="description">Decked out and ready to roll. Just insert meetings, people and presentations. </p>

      </div>
    </div>
  </div>
  <% end %>

  <%= link_to spaces_path(:search => { category: "creative"}) do %>
  <div class="column">
    <div class="demo-title"></div>
    <!-- Post-->
    <div class="post-module">
      <!-- Thumbnail-->
      <div class="thumbnail">
        <img src="https://i.pinimg.com/736x/1d/8d/43/1d8d43545c5694cf1beecfffbc09a901--art-studio-spaces-studio-artist-workspaces.jpg"/>
      </div>
      <!-- Post Content-->
      <div class="post-content">
        <div class="category">Creative spaces</div>
        <h1 class="title">Create in studios, workshops and spaces</h1>
        <p class="description">Say no to the creative block and get back to doing the work you love.</p>

      </div>
    </div>
  </div>
  <% end %>

  <%= link_to spaces_path(:search => { category: "event"}) do %>
  <div class="column">
    <div class="demo-title"></div>
    <!-- Post-->
    <div class="post-module">
      <!-- Thumbnail-->
      <div class="thumbnail">
        <img src="http://res.cloudinary.com/svendk/image/upload/v1503589374/tgfddkadz366qbevfim5.jpg" style="height: 100%;"/>
      </div>
      <!-- Post Content-->
      <div class="post-content">
        <div class="category">Event Spaces</div>
        <h1 class="title">Celebrate launches, events and parties</h1>
        <p class="description">Spaces with style. </p>

      </div>
    </div>
  </div>
  <% end %>

  <%= link_to spaces_path(:search => { category: "retail"}) do %>
  <div class="column">
    <div class="demo-title"></div>
    <!-- Post-->
    <div class="post-module">
      <!-- Thumbnail-->
      <div class="thumbnail">
        <img src="http://weburbanist.com/wp-content/uploads/2011/12/pop-up-shops-puma-city.jpg" style="height: 100%;" />
      </div>
      <!-- Post Content-->
      <div class="post-content">
        <div class="category">Retail Spaces</div>
        <h1 class="title">Sell in pop-up shops, stalls and shares</h1>
        <p class="description">Selling just got easier. </p>

      </div>
    </div>
  </div>
  <% end %>

</div>

<% content_for(:after_js) do %>
  <script>
  const prefix = "Explore ";
  const skills = [
    "work spaces",
    "creative spaces",
    "retail spaces",
    "event spaces"
  ].map(s => `${s}.`);
  const delay = 2;
  const step = 1;
  const tail = 5;
  const timeout = 75;

  const fancy = document.createElement("p");
  $('#fancy-title').html(fancy);

  const colors = [
    "rgb(110,64,170)",
    "rgb(150,61,179)",
    "rgb(191,60,175)",
    "rgb(228,65,157)",
    "rgb(254,75,131)",
    "rgb(255,94,99)",
    "rgb(255,120,71)",
    "rgb(251,150,51)",
    "rgb(226,183,47)",
    "rgb(198,214,60)",
    "rgb(175,240,91)",
    "rgb(127,246,88)",
    "rgb(82,246,103)",
    "rgb(48,239,130)",
    "rgb(29,223,163)",
    "rgb(26,199,194)",
    "rgb(35,171,216)",
    "rgb(54,140,225)",
    "rgb(76,110,219)",
    "rgb(96,84,200)"
  ];
  function getRandomColor() {
    return colors[Math.floor(Math.random() * colors.length)];
  }
  function getRandomChar() {
    return String.fromCharCode(Math.random() * (127 - 33) + 33);
  }
  function getRandomColoredString(n) {
    const fragment = document.createDocumentFragment();
    for (let i = 0; i < n; i++) {
      const char = document.createElement("span");
      char.textContent = getRandomChar();
      char.style.color = getRandomColor();
      fragment.appendChild(char);
    }
    return fragment;
  }

  const ss = {
    text: "",
    prefixP: -tail,
    skillI: 0,
    skillP: 0,
    direction: "forward",
    delay,
    step
  };

  function render() {
    const skill = skills[ss.skillI];

    if (ss.step) {
      ss.step--;
    } else {
      ss.step = step;
      if (ss.prefixP < prefix.length) {
        if (ss.prefixP >= 0) {
          ss.text += prefix[ss.prefixP];
        }
        ss.prefixP++;
      } else {
        if (ss.direction === "forward") {
          if (ss.skillP < skill.length) {
            ss.text += skill[ss.skillP];
            ss.skillP++;
          } else {
            if (ss.delay) {
              ss.delay--;
            } else {
              ss.direction = "backward";
              ss.delay = delay;
            }
          }
        } else {
          if (ss.skillP > 0) {
            ss.text = ss.text.slice(0, -1);
            ss.skillP--;
          } else {
            ss.skillI = (ss.skillI + 1) % skills.length;
            ss.direction = "forward";
          }
        }
      }
    }

    fancy.textContent = ss.text;
    fancy.appendChild(
      getRandomColoredString(
        ss.prefixP < prefix.length
          ? Math.min(tail, tail + ss.prefixP)
          : Math.min(tail, skill.length - ss.skillP)
      )
    );
    setTimeout(render, timeout);
  }
  setTimeout(render, 500);
  </script>
<% end %>

